                                      JAVASCRIPT 
My code editor- visualstudio code 
COMMENTS IN JAVASCRIPT
-line of codes that javascript ignores, used to explain sections of the code 
      -in-line comments (//)
      -multi-line comments (*/)
                      DATA TYPES AND VARIABLES
-data- anything that has meaning to a computers
      DATA TYPES 
PRIMITIVE                            
1.number-interger(age=25)
        -floating-point/ decimals/floats(price=19.99)
 2.string-sequence of characters(text) "dog"
 3.boolean-true or false
 4.undefined-variable that has been declared but not assigned a values
      eg. let user; (no value assigned yet)
 5.Null-intentional absence of any object value (nothing) 
 6.symbol - immutable primitive value that is unique
 7. biglnt-inegers that are too large for the number type

 NON-PRIMITIVE 
1.object-can store collection/a lot of different key-value pairs
    eg. let person = {
    name: "jenny" ,
    age:25,
    isEmployed: true
 };
 
                    
                      VARIABLES
Allows computers to store and manipulate data in a dynamic fashion
DECLARING VARIABLES
    var- used throughout the whole program
    let- used within the scope of where you declared it 
    const- variable the can never change; you can never change it.  
    there is difference between assigning variables and declaring variables 
Assigning variables- var variable semicolon (var a;) 
                     const variable semicolon (const a;) 
                      let variable semicolon (let a;)   
      (Note: end all lines in js with semicolon)   
Declaring variables -variable equals sign data type semicolon (a = "dog";)
                    variable equals symbol data type semicolon (a = "dog";)
                    variable equals symbol data type semicolon (a = "dog";)
Assigning and Declaring in one line- var a = "dog";
                                     let a = "dog";
                                     const a = "dog"; 
CASE SENSITIVITY IN VARIABLES
-variables names and function names in javascript are case sensitive meaning capitilaztion matters 
-use camelCase- first  letter is always lower case and a new word or new section of word first letter 
is capitilized  

                     OPERATORS  USED TO INTIALIZE VARIABLES
-adding numbers
          use (+) operator. e.g var sum = 10 + 10;
-subtracting numbers
          use (-) operator e.g var difference = 20 - 2;
-multiplying 
          use (*) astric/star symbol e.g var product = 8 * 10;
-dividing numbers
          use  (/) symbol e.g var quotient = 66 / 33;
incrinement numbers 
          means to add one to a number. 
          use (++)  e.g var myVar = 67;
                        myVar ++; 
-Decrimenting numbers
          to subtract a number 
          use (- -)  e.g var myVar = 54;
                         myVar - -;
-Decimal Numbers/floating point numbers/floats
      e.g var ourDecimalNumber = 5.7;
     multiplying decimals is the same as multiplying intergers e.g var product = 2.0 * 2.5
     diving decimals is same as diving intergers e.g var quotient = 2.5 / 2.0; 
-Augemented addition (+=) 
     an addition shortcut e.g var a = 3;
                              a += 12;    --equals 15, 3 + 12
-Augemented Subtraction (-=)  
     subtraction shortcut e.g var a = 11;
                              a -= 6;
-Augemented multiplication (*=)
          e.g var a = 6;
              a *= 3;        --outputs 18 6*3 
Augemented Division (/=)
          e.g var b = 10;
              b /= 5;      --outputs 2 10 / 5  


                     STRING VARIABLES
-String -Any sort of text, it is surrounded by quation marks. either- single quation marks('')
                                                               double quation marks ("")
                                                               backticks (``)
                    e.g var firstName = 'jenny'
                          var firstName = "jenny"                                     
                          var firstName = `jenny`  
-quotes identify the beginning and end of s string
-when you have a quoted sring inside the string javascript sees the first quote inside the string
as the end of the string. 
-To escape this we use the Escape Character (\). at the beginning and end
of the quoted srting inside the string
 e.g var myStr = "i am a \"double quoted\" string inside \"double quotes\" ";
     console.log (myStr); --ouputs i am a "double quoted" string inside "double quotes"
-USING SINGLE QUOTES ('')
 -it is used to accomplish having a quoted string inside a string
 -used to quote the srting and then use double quotes for the string inside the string
     e.g var myStr = 'i am a string "quoted inside a string" to show "link"';
     --outputs i am a string "quoted inside a string" to show "link"
-USING BACKTICKS (``)  
  -you can use single and double quotes both within a string
  e.g var myStr = `my name is jennifer 'jenny' but most people call me "nyaguthii" also nicknamed as 'nyagu' `;
  --outputs my name is jennifer 'jenny' but most people call me "nyaguthii" also nicknamed as 'nyagu'
 -OTHER ESCAPE SEQUENCES IN STRINGS
    \\ backslash
    \n new line
    \r carriage return
    \t tab
    \b backspace
    \f form feed
 e.g var myStr = "first line \n \t \\second line \nthird line";  

               OPERATORS IN STRINGS 
-CONCATENATION (+) combining twon strings 
  E.G var ourStr = "I come first." + "I come second"
     (Note: ensure there is space btwn the end of quotation marks)
     console.log(ourStr); --ouputs I come first. I come second 
-CONSTRUCTING STRINGS WITH VARIABLES
  e.g var myName = "jenny";
      var ourStr = "hello our name is" + myName + ",how are you ?";
      --ouputs hello our name is jenny ,how are you?
-APPENDING VARIABLES TO STRINGS (+=)
  e.g var anAdjective = "awesome !";
     var ourStr = "learning javascript is";
     ourStr += anAdjective;
     console.log(ourStr)
     --ouputs learning javascript is awesome!

-FINDING LENGTH OF A STRING 
    E.g var lastNameLength = 0;
        var lastName = "love lace";
        lastNameLength = lastName.length;
        console.log(lastNameLength)
     --outputs 8 which is the length of the variable lastName
-FINDING FIRST CHARACTER IN A STRING
 -Use bracket notation [] to get a character at a specific index in a string 
   (Note: javascript starts counting a 0 which is called zero-based indexing) 
 e.g var firstLetterOfFirstName = "";
           var firstName = "jennifer"
           firstLetterOfFirstName = firstName [0];
           console.log (firstLetterOfFirstName)
           --outputs j 
-FINDING LAST CHARACTER IN A STRING
         var firstName = "jennifer"
         Var lastLetterOfFirstName = firstName [firstName.length - 1];
         console.log (lastLetterOfFirstName)
-To get the any character in the string you subtract however much you want from the length of the string

     -STRINGS IMMUTABILITY
strings are immutable; they cannot be altered once created but the can be fully changed
 e.g var ourStr = "jello world";
     ourStr [0] = "h";
     console.log()
     --ouputs an error- strings can only be fully changed
     var ourStr = "jello world";
     ourStr = "hello world";
     console.log()
     --outputs hello world
      WORD BLANKS
-Using knowledge of strings to build Mad libs syle word game 
-in a mad lib game you are provided sentences with some missing words like nouns, verbs, adjectives
and adverbs and you fill in the mising pieces with words of your choice to make a sentence that
could be funny and hopefully makes a lilo bit of sense
- uses a function
     function wordBlanks(myNoun, myAdjective, myVerb, myAdverb) {
          var result = "";
          result += "the " + myAdjective + " " myNoun + " " + myVerb + " " + to the store
          return result;
     }
     console.log(wordBlanks("dog", "big", "ran", "quickly"));  

                              ARRAYS
-special type of variables that hold more than one item at once (let <variable_name>)
-elements can be numbers,strings,objects or even functions                              
-Arrays allow you to store several pieces of data in one place
-they  start with a bracket notation and end with a bracket notation and every element in the array is
 separated by a comma
     let fruits = ["apple" , "banana" , "cherry"];  
     var myArray = ["john" , 25];    
-NESTED ARRAYS(multi-dimensional array) - one element in an array is another array
  e.g var myArray =[["the universe", 42], ["everything", 101010]];
  example of nested array: var myList =[["cereal", 23], ["milk", 2], ["juice", 2], ["eggs", 12], ["bananas", 4]];
 
                         ARRAYS MANIPULATION
non-destructive and destructive
non-destructive-slice(), concat()
destructive- splice(), push(), pop(), unshift(), shift()
push() - <array-name>.push- it adds elements at the end of an array
pop() - deletes elementsat the end of an array
unshift() -add one or more elements to the beginning
            returns new length of array
shift() -removes the first element from an array and returns that element
slice() adds or removes elements in an array
splice(<start_index>, )

ACCESS ARRAY DATA WITH INDEXES -finding specific indexes in an array
e.g var ourArray = [50, 60,70];
    var ourData = ourArray[0]; //equal 50
MODIFYING ARRAYS DATA WITH INDEXES- using array indexes to modify the array
 e.g var ourArray = [firstArray, secondArray, thirdArray];
     ourArray[1] = 45 //equals firstArray, updatedSecondArray, thirdArray  
ACCESS MULTI-DIMENSIONAL ARRAYS WITH INDEXES -you can use bracket notation[] to select an element in a 
   multi-dimensional or arrays of arrays 
   e.g var myArray = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [[10, 11, 12], 13,14]] (3-layered deep array)
       var myData = myArray[2] [1];  //equals 8  
APPENDING DATE TO THE END OF AN ARRAY- USE (push() function)  
     push() - <array-name>.push- it adds elements at the end of an array
           e.g var myArray = [["john", 23], ["cat", 2]];
                myArray.push(["dog", 3])
pop()- deletes/removes elements at the end of an array  
      e.g var myArray = [1, 2, 3];
          var removedFromOurArray = ourArray.pop(); --removes the last element in the array 

          var myArray =[["john", 23], ["dog", 2]]
          var removedFromOurArray = ourArray.pop();  --removes the last array in the nested array
shift() -removes the first element from an array and returns that element 
       e.g var myArray = [1, 2, 3];
           var removedFromOurArray = myArray.shift();  --equals 2 3
           
           var myArray =[["john", 23], ["dog", 2]]
           var removedFromOurArray = ourArray.shift();   --removes the first array in the nested array
unshift() -add one or more elements to the beginning
        e.g var myArray = ["simpson", "j", "cat"];
            myArray.shift();  //our array now equals ["j", "cat"];
            myArray.unshift("happy");  //our array now equals ["happy", "j", "cat"];
slice() adds or removes elements in an array
     e,g  let breakfast = ["chapati", "sausages", "matoke"];
          console.log(breakfast);
         --breakfast.slice(breakfast.length - 1, 2);
         -- console.log(breakfast);
         let breakfastcopy = breakfast.slice(1, -1);
         console.log(breakfastcopy);
         let breakfast = ["chapati", "sausages", "matoke"];(
splice()       
               let breakfast = ["tea", "coffee", "nduma"];
                breakfast.push("chapati", "sausages", "matoke");
                breakfast.splice(1, 1);
                console.log(breakfast);

                        FUNCTIONS 
functions allow us to create reusable code in javascript 
  function setup- 
      function functionName() {
       console.log("Heyya, World");
  }  
  functionName();
  everything inside the curly bracket is run everytime the function is called/invoked. 
     calling a function-executing/invoking it so that the code inside it gets run
   done by writting the function name followed by a parantheses 

-inside a function-declared within the functions curly braces {} only accessible
          from within that function.
-outside function -declared in the main program not inside any function  

                PASSING VALUES TO FUNCTIONS WITH ARGUMENTS
Parameters - variables that act as place holders for the values that are to be 
          input to a function when it is called            
      e.g function ourFunctionWithArgs(a, b) {
          console.log("a - b");
     }  
     ourFunctionWithArgs(10, 5);    --passing numbers 10 and 5 into the function
     --outputs 5

              SCOPES
 Visibilty of variables             
TYPES OF SCOPES
     -GLOBAL SCOPE-  variables are defined outside a function block. 
                    They can be seen everywhere in your javascript code 
          e.g --declare a variable
             var myGlobal = 10;
              function fun1() {
               -- assign 5 to oopsGlobal here
              }
              --only change code above this line 
              function fun2() {
               var output = "";
               if (typeof myGlobal != "undefined") {
                    output += "myGlobal: " + myGlobal;
               }
                if (typeof oopsGlobal != "undefined") [
                    output += "oopsGlobal: " + oopsGlobal
                ]
                console.log(output);
              }
              fun1();
              fun2();
              --type myGlobal equals 10 because it had been defined and the program knows about the 
              --variable bcoz it is in global scope 
(it is possible to set a variable without using the var keyword)
          e.g function fun1() {
               --assign 5 to oopsGlobal here
               oopsGlobal = 5;  --it is global automatically because it does not have a var keyword
              }
     (if you do use a var keyword since this is a within a function, it will be scoped to that function)         
               any function or block (accessible anywhere in the code)

  -LOCAL SCOPE- declared inside a function as well as the function Parameters (accessible only inside the function it is declared)
       e.g function myLocalScope () {
          var myVar = 5;
          console.log(myVar);
       }
       myLocalScope();

Note: It is possible to have local and global scope with the same name, the local variable takes
      precedent over the global variable 
        e.g var outerWear = "T-Shirt";
            function myOutfit() {
               var outerWear = "sweater";
               return outerWear;
            }  
            console.log(myOutfit());    --ouputs sweater because local variable took precedent  
                    -block scope -declared inside a block {} such as in an if,for or while statement  
RETURNING A VALUE FROM A FUNCTION WITH RETURN STATEMENT 
         e.g function minusSeven(num) {
          return num -7;
         }
         console.log(minusSeven(10));
         --outputs 3
         function timesFive(num) {
          return num * 5;
         }
         console.log(timesFive(5));
undefined value returned from a function
     -if you do not specify a return vale, the return value is just undefined  
      e.g var sum = 0
      function addThree() {
         sum = sum + 3; 
      }   
      --it does not return anything
      e.g 
      function addFive() {
         sum += 5; 
      }   
     --return nothing
assigment with a returned  value 
        e.g var changed = 0;
           --call function and pass num
            function change(num) {
               return (num + 5) / 3;
            }  
            --call the function change and pass in the ten  
            changed = change(10);
            --value returned from the function is going to be stored in the variable changed


            STAND IN-LINE 
-A cue is an abstract data structure where items are kept in order 
-New items can be added to the back of the cue and old items are taken off from the front of the cue 
 - functionality of a cue-using nextInLine- you can add item to the array that is passed in.
 -it is going to return the first item on item on the list 
        --in the nextInLine function you can add an item to the array that is passed in 
    e.g function nextInLine(arr, item) {
     --code here
     --it will return the first item on the list 
     return item;
    }  
    --if we add an item to this array it should come at the end and then return first item on the list (1)
    var testArr = [1,2,3,4,5];
    console.log("before: " + JSON.strinify(testArr));
    console.log(nextInLine(testArr, 6));
    console.log("After: " + JSON.strinify(testArr))
-- the JSON.sringify is a way to change an array into a string that can easily be printed out onthe screen

              BOOLEAN VALUES
-It is another data type, they are only two values True or false
-They do not use quotation marks 
     e.g function welcomeToBooleans() {
          return false;
     }

          CONDITIONAL STATEMENTS 
         (1) IF STATEMENTS
-used to make decisions in code, keyword if tells javascript to excute the code in the curly braces
under certain conditions defined inside the parantheses
      e.g function ourTrueOrFalse(isItTrue) {
          if (isItTrue) {
               return "yes, it is true";
          }
          return "No, it is false";
      }
      function trueOrFalse(wasThatTrue) {
          if (wasThatTrue) {
               return "yes, it is true";  
          }
              return "No, it is false";
      }
     console.log (trueOrFalse(true));

        COMPARISON OPERATORS RETURNING BOOLEAN
1. EQUALITY OPERATOR 
-Commonly used in if statement 
       function testEqual(val) {
          if (val == 12) {
               return "equal";
          }
              return "not equal";
       }    
      console.log(testEqual(10));
      --outputs not equal
2. STRICT EQUALITY OPERATOR

